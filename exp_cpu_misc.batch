#!/bin/bash

#SBATCH --job-name=PDMP    # create a short name for your job
#SBATCH --nodes=1                # node count
#SBATCH --ntasks=1               # total number of tasks across all nodes
#SBATCH --cpus-per-task=12       # cpu-cores per task (>1 if multi-threaded tasks)
#SBATCH --partition=gpu          # Name of the partition
#SBATCH --gres=gpu:1     # GPU nodes are only available in gpu partition
#SBATCH --time=48:00:00          # total run time limit (HH:MM:SS)
#SBATCH --mem=20G                # Total memory allocated
# ### ### SBATCH --hint=multithread       # we get physical cores not logical
#SBATCH --output=./log/%x_%j.out   # output file name
#SBATCH --array=0              # job array index

exp_number=$SLURM_ARRAY_TASK_ID

echo "### Running $SLURM_JOB_NAME with array task $SLURM_ARRAY_TASK_ID ###"

set -x
cd ${SLURM_SUBMIT_DIR}

module purge
module load cuda/11.4.0

source /home/$USER/.bashrc
conda activate diffusion

epochs=500

t=(2 5 10)

# learn jump time
#python ./run_pdmp.py --config 2d_data --name tmp  --sampler HMC --time_horizon ${t[${SLURM_ARRAY_TASK_ID}]} --epochs $epochs --eval 100 --loss ml --log --learn_jump_time --dataset gmm_grid
#python ./run_pdmp.py --config 2d_data --name tmp  --sampler HMC --time_horizon ${t[${SLURM_ARRAY_TASK_ID}]} --epochs $epochs --eval 100 --loss ml --log --learn_jump_time --dataset rose

# splitting scheme
#python ./run_pdmp.py --config 2d_data --name tmp  --sampler HMC --time_horizon ${t[${SLURM_ARRAY_TASK_ID}]} --epochs $epochs --eval 100 --loss ml --log --dataset gmm_grid
#python ./run_pdmp.py --config 2d_data --name tmp  --sampler HMC --time_horizon ${t[${SLURM_ARRAY_TASK_ID}]} --epochs $epochs --eval 100 --loss ml --log --dataset rose


#python ./run_pdmp.py --config 2d_data --name tmp  --sampler HMC --time_horizon 5 --epochs 20 --eval 5 --loss ml small_t --learn_jump_time --dataset gmm_grid


# MNIST
python ./run_pdmp.py --config mnist --name mnist_jump_time --sampler HMC --time_horizon 5 --epochs 100 --eval 5 --loss ml --learn_jump_time --log
